@page "/"
@using picSimu.Simulation
@implements IAsyncDisposable
@inject IJSRuntime Js


<PageTitle>Index</PageTitle>

<div class="top-row px-4">
    <input id="lst-file-input" type="file" style="width: 30em" class="form-control form-control-sm" multiple disabled="@(_isRunning)"/>
    <button class="btn btn-primary btn-sm" disabled="@(!_pic.ProgramLoaded || _isRunning)" @onclick="RunSimulation">Run</button>
    <button class="btn btn-primary btn-sm" disabled="@(!_pic.ProgramLoaded || _isRunning)" @onclick="SimulationStep">Step</button>
    <button class="btn btn-primary btn-sm" disabled="@(!_pic.ProgramLoaded || _isRunning)" @onclick="AutoStepSimulation">Auto Step</button>
    <button class="btn btn-primary btn-sm" disabled="@(!_isRunning)" @onclick="StopSimulation">Stop</button>
    <button class="btn btn-primary btn-sm" disabled="@(!_pic.ProgramLoaded || _isRunning)" @onclick="ResetSimulation">Reset Simulation</button>
    <button class="btn btn-secondary btn-sm" @onclick="() => _pic.Memory.MCLR()" disabled="@(!_pic.ProgramLoaded)">MCLR</button>
    <b style="margin-left: auto">picSimu</b>
</div>

<div class="content">

<fieldset id="sfr-w" class="d-flex flex-row justify-content-between" disabled="@_isRunning">
    <label class="h5 pe-5">SFR + W:</label>
    <div>
        <label class="sfr-label">W: </label>
        <label title="@_pic.WRegister.ToTooltip()" class="sfr-value">@_pic.WRegister.ToHexString()</label>
    </div>
    <div class="hex-input">
        <label class="sfr-label">PCL: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[2].register0"></HexInput>
    </div>
    <div class="hex-input">
        <label class="sfr-label">PCLATH: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[0xA].register0"></HexInput>
    </div>
    <div class="hex-input">
        <label class="sfr-label">STATUS: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[3].register0"></HexInput>
    </div>
    <div class="hex-input">
        <label class="sfr-label">FSR: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[4].register0"></HexInput>
    </div>
    <div class="hex-input">
        <label class="sfr-label">OPTION: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[1].register1"></HexInput>
    </div>
    <div style="margin-right: 0" class="hex-input">
        <label class="sfr-label">TMR0: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[1].register0"></HexInput>
    </div>
</fieldset>

<hr style="margin-top: 0; margin-bottom: .25rem">

<div class="main-area">

<div id="lst-container" style="flex-grow: 2" class="d-flex flex-column overflow-hidden">
    <div class="d-flex flex-row align-items-baseline">
        <label style="margin-right: 2em" class="h5">LST</label>
        <div style="margin-left: 7em;" class="d-flex flex-row align-items-center @(!_run ? "visually-hidden" : "")">
            <b style="color: #268bd2">Running</b>
            <div class="dot-flashing"></div>
        </div>
        <div class="sleeping @(!_pic.IsSleeping ? "visually-hidden" : "")">
            <span>z</span>
            <span>z</span>
            <span>z</span>
        </div>
        <div style="margin-left: auto"></div>
        <label class="sfr-label">PC: </label>

        <label style="width: 2.6em" title="@(_pic.ProgramCounter)d">@_pic.ProgramCounter.ToString("X3")h</label>
    </div>
    <div id="code-block" class="code-block d-flex overflow-auto flex-row @(_run ? "code-block-disabled" : "")">
        @{
            <div class="d-flex code-block-breakpoints">
                <pre id="breakpoint-pre">
            @if (_instructionCodes != null)
            {
                int y = 0;
                @for (int i = 0; i <= _rowCount - 1; i++)
                {
                    @if (_instructionRows.Contains(i))
                    {
                        Breakpoint breakpoint = _pic.GetBreakPoint(_instructionCodes[y].ProgramCounter);
                        <BootstrapCheckbox @bind-Value="breakpoint.Value"></BootstrapCheckbox>
                        y++;
                    }
                    else
                    {
                        <div>&zwnj;</div>
                    }
                }
            }
            </pre>
            </div>
        }
        <div style="margin-bottom: auto" id="code-div" class="d-flex">
            <pre id="code-pre"></pre>
        </div>
    </div>
</div>

<div style="margin-left: 0.5em" class="vr"></div>

<div id="register-table" class="d-flex flex-column">
    @{
        if (_showEeprom)
        {
            <div class="register-table-top">
                <div class="d-flex flex-column">
                    <label class="h5">EEPROM</label>
                </div>
                <button class="btn btn-secondary btn-sm" @onclick="() => _showEeprom = !_showEeprom">GPR</button>
            </div>

            <div style="overflow-x: hidden;" class="d-flex">
                <table class="table-sm">
                    <thead>
                    <tr>
                        <th>Adr.</th>
                        <th class="register-table-border-1">Val.</th>
                        <th class="register-table-border-2">Adr.</th>
                        <th>Val.</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (uint i = 0; i < EEPROM.LENGTH / 2; i++)
                    {
                        uint y = i + EEPROM.LENGTH / 2;
                        uint value1 = _pic.EEPROM.Cells[i];
                        uint value2 = _pic.EEPROM.Cells[y];
                        <tr>
                            <td title="@i.ToTooltip()">@i.ToHexString()</td>
                            <td title="@value1.ToTooltip()">
                                @value1.ToHexString()
                            </td>
                            <td title="@y.ToTooltip()">@y.ToHexString()</td>
                            <td title="@value2.ToTooltip()">
                                @value2.ToHexString()
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="register-table-top">
                <div class="d-flex flex-column">
                    <label class="h5">File Register</label>
                    <label class="h5">(SFR & GPR)</label>
                </div>
                <button class="btn btn-secondary btn-sm" @onclick="() => _showEeprom = !_showEeprom">EEPROM</button>
            </div>

            <fieldset style="overflow-x: hidden;" class="d-flex" disabled="@_isRunning">
                <table class="table-sm">
                    <thead>
                    <tr>
                        <th class="text-center" colspan="2">Bank 0</th>
                        <th class="text-center" colspan="2">Bank 1</th>
                    </tr>
                    <tr>
                        <th>Adr.</th>
                        <th class="register-table-border-1">Val.</th>
                        <th class="register-table-border-2">Adr.</th>
                        <th>Val.</th>
                    </tr>
                    </thead>
                    <tbody>
                    <Virtualize Items="@_registerBindings" Context="registerPair">
                        <tr>
                            <td title="@(registerPair.register0.Address)d">@registerPair.register0.Address.ToHexString()</td>
                            <td class="hex-input">
                                <HexInput @bind-Value="@registerPair.register0"></HexInput>
                            </td>
                            <td title="@(registerPair.register1.Address)d">@registerPair.register1.Address.ToHexString()</td>
                            <td class="hex-input">
                                <HexInput @bind-Value="@registerPair.register1"></HexInput>
                            </td>
                        </tr>
                    </Virtualize>
                    </tbody>
                </table>
            </fieldset>
        }
    }
</div>

<div style="margin-left: 0.5em" class="vr"></div>

<div id="right-control" class="justify-content-around">

<div style="overflow-y: auto; max-height: 100%; overflow-x: hidden">
<div class="d-flex flex-row justify-content-around">
    <div id="timing-control" class="d-flex flex-column">
        <label style="align-self: center;" class="h5">Timing</label>
        <div class="d-flex flex-row flex-grow-1 section">

            <div class="d-flex flex-column smaller-text justify-content-between">

                <div class="section">
                    <div id="frequency-control">
                        <label class="sfr-label">Quartz: </label>
                        <select type="number" class="form-select-sm" @bind="_pic.FrequencyInKhz">
                            <option value="32">32 KHz</option>
                            <option value="100">100 KHz</option>
                            <option value="500">0.5 MHz</option>
                            <option value="4000">4 MHz</option>
                            <option value="8000">8 MHz</option>
                            <option value="16000">16 MHz</option>
                            <option value="32000">32 MHz</option>
                            <option value="64000">64 MHz</option>
                        </select>
                    </div>

                    <table id="timing-info">
                        <tr>
                            <th>Cycles: </th>
                            <td colspan="2" title="@_pic.Cycles">@_pic.Cycles</td>
                        </tr>
                        <tr>
                            <th>Runtime:</th>
                            <td title="@_pic.CalculateRuntime().TimeTooltip()"> @($" {_pic.CalculateRuntime()} ") </td>
                            <td style="width: 1.3em;">µs</td>
                        </tr>
                    </table>
                </div>

                <hr>

                <div>
                    <div class="h6">Timer0</div>
                    <div class="hex-input">
                        <div class="sfr-label">TMR0: </div>
                        <fieldset disabled="@_isRunning">
                            <HexInput class="form-control" @bind-Value="_registerBindings[1].register0"></HexInput>
                        </fieldset>
                    </div>
                </div>

                <hr>

                <div class="section">
                    <div class="h6">Watchdog</div>
                    <div>
                        <label class="sfr-label">WDT: </label> @_pic.WatchdogTime µs
                    </div>
                    <div>
                        <label class="sfr-label">WDTE conf.</label>
                        <BootstrapCheckbox @bind-Value="_pic.WDTE"></BootstrapCheckbox>
                        <div class="small">Watchdog enable bit</div>
                    </div>
                </div>
            </div>

            <div class="vr"></div>

            <div class="d-flex flex-column smaller-text justify-content-between">

                <div class="h6">Prescaler</div>
                <div>
                    <label class="sfr-label">Prescaler Rate: </label>
                    <div>1:@_pic.GetScalerRate()</div>
                </div>
                <div>
                    <label class="sfr-label">Assigned to:</label>
                    <div>@(_pic.Memory.ReadRegister(0x81).IsBitSet(3) ? "Watchdog" : "Timer0")</div>
                </div>

                <table>
                    <tbody>
                    <tr>
                        <th>Counter: </th>
                        <td>@_pic.Scaler</td>
                    </tr>
                    </tbody>
                </table>

                <div></div>

            </div>

        </div>
    </div>

    <div class="vr"></div>

    <div id="stack-table" style="flex-grow: 2; align-items: center;" class="d-flex flex-column">
        <label class="h5">Stack</label>
        <table style="width: fit-content" class="table-sm">
            <thead>
            <tr>
                <th>Ptr.</th>
                <th>Adr.</th>
            </tr>
            </thead>
            <tbody>
            @{
                @for (int i = 0; i < Stack.Length; i++)
                {
                    uint address = _pic.Stack.Get(i);
                    <tr class='@(_pic.Stack.Pointer % Stack.Length == i ? "stack-highlight" : "")'>
                        <td>@i</td>
                        <td title="@(address)d">@(address.ToString("X3"))h</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
</div>

<hr>

<div id="sfr-table" class="d-flex flex-column">
    <label class="h5">SFR (Bits)</label>
    <table style="height: 100%" class="table-sm">
        <tbody>
        <tr>
            <th>STATUS</th>
            <td>IRP</td>
            <td>RP1</td>
            <td>RP0</td>
            <td style="text-decoration:overline">TO</td>
            <td style="text-decoration:overline">PD</td>
            <td>Z</td>
            <td>DC</td>
            <td>C</td>
        </tr>
        <tr>
            <th></th>
            @{
                uint statusReg = _pic.Memory.ReadRegister(3);
                @for (int i = 7; i >= 0; i--)
                {
                    <td>@statusReg.GetBit(i)</td>
                }
            }
        </tr>
        <tr>
            <th>EECON1</th>
            <td>—</td>
            <td>—</td>
            <td>—</td>
            <td>EEIF</td>
            <td>WRERR</td>
            <td>WREN</td>
            <td>WR</td>
            <td>RD</td>
        </tr>
        <tr>
            <th></th>
            @{
                uint eecon1Reg = _pic.Memory.ReadRegister(0x88);
                @for (int i = 7; i >= 0; i--)
                {
                    if (i <= 4)
                    {
                        <td>@eecon1Reg.GetBit(i)</td>
                    }
                    else
                    {
                        <td>—</td>
                    }
                }
            }
        </tr>
        <tr>
            <th>OPTION</th>
            <td style="text-decoration:overline">RBPU</td>
            <td>INTEDG</td>
            <td>T0CS</td>
            <td>T0SE</td>
            <td>PSA</td>
            <td>PS2</td>
            <td>PS1</td>
            <td>PS0</td>
        </tr>
        <tr>
            <th></th>
            @{
                uint optionReg = _pic.Memory.ReadRegister(0x81);
                @for (int i = 7; i >= 0; i--)
                {
                    <td>@optionReg.GetBit(i)</td>
                }
            }
        </tr>
        <tr>
            <th>INTCON</th>
            <td>GIE</td>
            <td>EEIE</td>
            <td>T0IE</td>
            <td>INTE</td>
            <td>RBIE</td>
            <td>T0IF</td>
            <td>INTF</td>
            <td>RBIF</td>
        </tr>
        <tr>
            <th></th>
            @{
                uint intconReg = _pic.Memory.ReadRegister(0xb);
                @for (int i = 7; i >= 0; i--)
                {
                    <td>@intconReg.GetBit(i)</td>
                }
            }
        </tr>
        </tbody>
    </table>
</div>

<hr>

@* Port A *@
<div class="d-flex flex-row">
    <label class="h5">Port A</label>
    <label style="margin-left: auto">TRIS 1: Input / 0: Output</label>
</div>
<div class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">Index</div>
    @for (int i = 4; i >= 0; i--)
    {
        <div class="port-element">@i</div>
    }
</div>
<div class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">TRIS</div>
    @for (int i = 4; i >= 0; i--)
    {
        RegisterBit bit = _pic.Memory.GetRegisterBit(0x85, i);
        <div class="port-element">
            <BootstrapCheckbox @bind-Value="bit.Value"></BootstrapCheckbox>
        </div>
    }
</div>
<div class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">Pin</div>
    @for (int i = 4; i >= 0; i--)
    {
        var bit = new PortBit(_pic.Memory.PortA, i);
        <div class="port-element">
            <BootstrapCheckbox @bind-Value="bit.Value"></BootstrapCheckbox>
        </div>
    }
</div>
@* Port A *@
<hr>

@* Port B *@
<label class="h5">Port B</label>
<div class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">Index</div>
    @for (int i = 7; i >= 0; i--)
    {
        <div class="port-element">@i</div>
    }
</div>
<div class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">TRIS</div>
    @for (int i = 7; i >= 0; i--)
    {
        RegisterBit bit = _pic.Memory.GetRegisterBit(0x86, i);
        <div class="port-element">
            <BootstrapCheckbox @bind-Value="bit.Value"></BootstrapCheckbox>
        </div>
    }
</div>
<div class="d-flex flex-row justify-content-between me-2 mb-2">
    <div class="sfr-label port-label">Pin</div>
    @for (int i = 7; i >= 0; i--)
    {
        var bit = new PortBit(_pic.Memory.PortB, i);
        <div class="port-element">
            <BootstrapCheckbox @bind-Value="bit.Value"></BootstrapCheckbox>
        </div>
    }
</div>
@* Port B *@

</div>
</div>
</div>
</div>
<hr class="mt-1">