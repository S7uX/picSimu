@page "/"
@using picSimu.Simulation
@using picSimu.Simulation.Registers
@* @implements IAsyncDisposable *@
@inject IJSRuntime JS

@code {
    private IJSObjectReference? module;
    private string? code;
    private string? parsedInstructionCodes;
    public string[]? InstructionCodes;
    private Pic pic = new Pic();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/parser.js");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        code = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
        await DisplayPicCode(code);
        parsedInstructionCodes = await GetInstructionCodes(code);
        Console.WriteLine("parsed instruction codes: " + parsedInstructionCodes);
        if (parsedInstructionCodes != null)
        {
            InstructionCodes = parsedInstructionCodes.Split(",");
            pic = new Pic();

            if (InstructionCodes != null)
            {
                pic.LoadInstructionCodes(InstructionCodes);
            }
        }
    }

    public async ValueTask<string?> DisplayPicCode(string sourceCode)
    {
        return module is not null ?
            await module.InvokeAsync<string>("parsePic", sourceCode) : null;
    }

    public async ValueTask<string?> GetInstructionCodes(string sourceCode)
    {
        return module is not null ?
            await module.InvokeAsync<string>("getInstructionCodes", sourceCode) : null;
    }

    public async Task<bool> RunSimulation()
    {
        if (InstructionCodes != null)
        {
            pic.Run();
        }
        return false;
    }

    public async Task<bool> StopSimulation()
    {
        if (InstructionCodes != null)
        {
            pic.Stop();
        }
        return false;
    }

    public async Task<bool> StepSimulation()
    {
        if (InstructionCodes != null)
        {
            pic.Step();
        }
        return false;
    }

    public async Task<bool> ResetSimulation()
    {
        if (InstructionCodes != null)
        {
            pic.Reset();
        }
        return false;
    }

    // public async ValueTask DisposeAsync()
    // {
    //     if (module is not null)
    //     {
    //         await module.DisposeAsync();
    //     }
    // }

    private uint UpdateProgramCounter(uint pc)
    {
        module?.InvokeAsync<string>("highlightCodeLine", pc.ToString());
        return pc;
    }

    public Port TrisA { get; set; } = new Port();
    public Port PortA { get; set; } = new Port();
    public Port TrisB { get; set; } = new Port();
    public Port PortB { get; set; } = new Port();
    public Timing Timing { get; set; } = new Timing() {QuartzFrequency = 32, ReleaseWatchdog = false};

}

<PageTitle>Index</PageTitle>

<div class="top-row px-4">
    <InputFile style="width: 30em" class="form-control form-control-sm" OnChange="@LoadFiles" multiple/>
    <button class="btn btn-primary btn-sm" disabled="@(InstructionCodes is null)" @onclick="RunSimulation">Start</button>
    <button class="btn btn-primary btn-sm" disabled="@(InstructionCodes is null)" @onclick="StopSimulation">Stop</button>
    <button class="btn btn-primary btn-sm" disabled="@(InstructionCodes is null)" @onclick="StepSimulation">Step</button>
    <button class="btn btn-primary btn-sm" disabled="@(InstructionCodes is null)" @onclick="ResetSimulation">Reset</button>
    <b style="margin-left: auto">picSimu</b>
</div>


<article class="content">
<div class="d-flex flex-row justify-content-between">
    <label class="h5 pe-5">SFR + W:</label>
    <div>
        <label class="sfr-label">W: </label>
        <label title="@pic.wRegister.ToTooltipString()" class="sfr-value">@pic.wRegister.ToHexString()</label>
    </div>
    <div>
        <label class="sfr-label">PCL: </label>
        <label title="@pic.Programmcounter.ToTooltipString()" class="sfr-value">@UpdateProgramCounter(pic.Programmcounter).ToHexString()</label>
    </div>
    <div>
        <label class="sfr-label">PCLATH: </label>
        <label title="@pic.Memory.ReadRegister(0xA).ToTooltipString()" class="sfr-value">@pic.Memory.ReadRegister(0xA).ToHexString()</label>
    </div>
    <div>
        <label class="sfr-label">Status: </label>
        <label title="@pic.Memory.ReadRegister(3).ToTooltipString()" class="sfr-value">@pic.Memory.ReadRegister(3).ToHexString()</label>
    </div>
    <div>
        <label class="sfr-label">FSR: </label>
        <label title="@pic.Memory.ReadRegister(4).ToTooltipString()" class="sfr-value">@pic.Memory.ReadRegister(4).ToHexString()</label>
    </div>
    <div>
        <label class="sfr-label">Option: </label>
        <label title="@pic.Memory.ReadRegister(0x81).ToTooltipString()" class="sfr-value">@pic.Memory.ReadRegister(0x81).ToHexString()</label>
    </div>
    <div>
        <label class="sfr-label">Prescaler: </label>
        <label class="sfr-value">1:1</label>
    </div>
    <div>
        <label class="sfr-label">Timer0: </label>
        <label title="@pic.Memory.ReadRegister(1).ToTooltipString()" class="sfr-value">@pic.Memory.ReadRegister(1).ToHexString()</label>
    </div>
</div>

<hr class="my-1">

<div class="d-flex flex-row overflow-hidden pt-2">

<div style="flex-grow: 2" class="d-flex flex-column overflow-hidden">
    <label class="h5">LST</label>
    <div id="code-block" class="code-block d-flex overflow-auto">
        <pre  ></pre>
    </div>
</div>

<div style="margin-left: 0.5em" class="vr"></div>

<div id="register-table" class="d-flex flex-column">
    <label class="h5">File Register</label>
    <label class="h5">(SFR & GPR)</label>
    <div style="overflow-x: hidden;" class="d-flex">
        <table class="table-sm">
            <thead>
            <tr>
                <th class="text-center" colspan="2">Bank 0</th>
                <th class="text-center" colspan="2">Bank 1</th>
            </tr>
            <tr>
                <th>Adr.</th>
                <th class="register-table-border-1">Val.</th>
                <th class="register-table-border-2">Adr.</th>
                <th>Val.</th>
            </tr>
            </thead>
            <tbody>
            @{
                @for (uint i = 0; i < pic.Memory.Register.Length / 2; i++)
                {
                    uint y = i + 0x80;
                    <tr>
                        <td title="@i">@i.ToHexString()</td>
                        <td title="@pic.Memory.ReadRegister(i).ToTooltipString()">@pic.Memory.Register[i].ToHexString()</td>
                        <td title="@y">@y.ToHexString()</td>
                        <td title="@pic.Memory.ReadRegister(y).ToTooltipString()">@pic.Memory.Register[y].ToHexString()</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
</div>

<div style="margin-left: 0.5em" class="vr"></div>

<div class="d-flex flex-column justify-content-around">

<div class="d-flex flex-row justify-content-around">
    <EditForm Model="@Timing" id="timing-control" class="d-flex flex-column smaller-text justify-content-center">
        <label class="h5">Timing</label>
        <div>
            <label class="sfr-label">Runtime: </label> <label>0 Âµs</label>
        </div>
        <div>
            <label class="sfr-label">Quartz: </label>
            <InputSelect class="form-select-sm" @bind-Value="Timing.QuartzFrequency">
                <option value="32" selected>32 kHz</option>
            </InputSelect>
        </div>
        <div>
            <label class="sfr-label">Release Watchdog: </label>
            <BootstrapCheckbox @bind-Value="Timing.ReleaseWatchdog"></BootstrapCheckbox>
        </div>
        <div>
            <label class="sfr-label">Watchdog: </label> <label>00h</label>
        </div>
    </EditForm>

    <div class="vr"></div>

    <div style="flex-grow: 2; align-items: center;" id="stack-table" class="d-flex flex-column">
        <label class="h5">Stack</label>
        <table style="width: fit-content" class="table-sm">
            <thead>
            <tr>
                <th>Ptr.</th>
                <th>Adr.</th>
            </tr>
            </thead>
            <tbody>
            @{
                @for (uint i = 0; i < pic.Stack.Length; i++)
                {
                    <tr>
                        <td>@i</td>
                        <td>@pic.Stack.get(i).ToHexString()</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
</div>

<hr>

<div id="sfr-bits-table" class="d-flex flex-column">
    <label class="h5">SFR (Bits)</label>
    <table style="height: 100%" class="table-sm">
        <tbody>
        <tr>
            <th>Status</th>
            <td>IRP</td>
            <td>RP1</td>
            <td>RP0</td>
            <td>
                <span style="text-decoration:overline">TO</span>
            </td>
            <td>
                <span style="text-decoration:overline">PD</span>
            </td>
            <td>Z</td>
            <td>DC</td>
            <td>C</td>
        </tr>
        <tr>
            <th></th>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>@pic.Memory.GetZeroFlag().ToNumber()</td>
            <td>@pic.Memory.GetDigitCarryFlag().ToNumber()</td>
            <td>@pic.Memory.GetCarryFlag().ToNumber()</td>
        </tr>
        <tr>
            <th>Option</th>
            <td>
                <span style="text-decoration:overline">RBPU</span>
            </td>
            <td>INTEDG</td>
            <td>T0CS</td>
            <td>T0SE</td>
            <td>PSA</td>
            <td>PS2</td>
            <td>PS1</td>
            <td>PS0</td>
        </tr>
        <tr>
            <th></th>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <th>Intcon</th>
            <td>GIE</td>
            <td>EEIE</td>
            <td>T0IE</td>
            <td>INTE</td>
            <td>RBIE</td>
            <td>T0IF</td>
            <td>INTF</td>
            <td>RBIF</td>
        </tr>
        <tr>
            <th></th>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        </tbody>
    </table>
</div>

<hr>

<label class="h5">Port A</label>
<div class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">Index</div>
    <div>7</div>
    <div>6</div>
    <div>5</div>
    <div>4</div>
    <div>3</div>
    <div>2</div>
    <div>1</div>
    <div>0</div>
</div>
<EditForm Model="@pic.Memory.Register[0x85]" class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">Tris</div>
    @{
        @for (int i = 7; i >= 0; i--)
        {
            RegisterBit bit = pic.Memory.GetRegisterBit(0x85, i);
            <div>
                <BootstrapCheckbox
                    Value="bit.Value"
                    ValueChanged="@(b => bit.Value = b)"
                    ValueExpression="@(() => bit.Value)">
                </BootstrapCheckbox>
            </div>
        }
    }
</EditForm>
<EditForm Model="@pic.Memory.Register[5]" class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">Pin</div>
    @for (int i = 7; i >= 0; i--)
    {
        RegisterBit bit = pic.Memory.GetRegisterBit(5, i);
        <div>
            <BootstrapCheckbox
                Value="bit.Value"
                ValueChanged="@(b => bit.Value = b)"
                ValueExpression="@(() => bit.Value)">
            </BootstrapCheckbox>
        </div>
    }
</EditForm>

<hr>

<label class="h5">Port B</label>
<div class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">Index</div>
    <div>7</div>
    <div>6</div>
    <div>5</div>
    <div>4</div>
    <div>3</div>
    <div>2</div>
    <div>1</div>
    <div>0</div>
</div>
<EditForm Model="@pic.Memory.Register[0x86]" class="d-flex flex-row justify-content-between me-2">
    <div class="sfr-label port-label">Tris</div>
    @for (int i = 7; i >= 0; i--)
    {
        RegisterBit bit = pic.Memory.GetRegisterBit(0x86, i);
        <div>
            <BootstrapCheckbox
                Value="bit.Value"
                ValueChanged="@(b => bit.Value = b)"
                ValueExpression="@(() => bit.Value)">
            </BootstrapCheckbox>
        </div>
    }
</EditForm>
<EditForm Model="@pic.Memory.Register[6]" class="d-flex flex-row justify-content-between me-2 mb-2">
    <div class="sfr-label port-label">Pin</div>
    @for (int i = 7; i >= 0; i--)
    {
        RegisterBit bit = pic.Memory.GetRegisterBit(6, i);
        <div>
            <BootstrapCheckbox
                Value="bit.Value"
                ValueChanged="@(b => bit.Value = b)"
                ValueExpression="@(() => bit.Value)">
            </BootstrapCheckbox>
        </div>
    }
</EditForm>
</div>
</div>
</article>
<hr class="mt-1">