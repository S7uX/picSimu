@page "/"
@using picSimu.Simulation
@using picSimu.Simulation.Registers
@using System.Text.RegularExpressions
@* @implements IAsyncDisposable *@
@inject IJSRuntime JS


<PageTitle>Index</PageTitle>

<div class="top-row px-4">
    <InputFile style="width: 30em" class="form-control form-control-sm" OnChange="@LoadFiles" multiple disabled="@(_autoStep || _picRun is not null)"/>
    <button class="btn btn-primary btn-sm" disabled="@(!_pic.ProgramLoaded || _autoStep || _picRun is not null)" @onclick="RunSimulation">Run</button>
    <button class="btn btn-primary btn-sm" disabled="@(!_pic.ProgramLoaded || _autoStep || _picRun is not null)" @onclick="StepSimulation">Step</button>
    <button class="btn btn-primary btn-sm" disabled="@(!_pic.ProgramLoaded || _autoStep || _picRun is not null)" @onclick="AutoStepSimulation">Auto Step</button>
    <button class="btn btn-primary btn-sm" disabled="@(!(_autoStep || _picRun is not null))" @onclick="StopSimulation">Stop</button>
    <button class="btn btn-primary btn-sm" disabled="@(!_pic.ProgramLoaded || _autoStep || _picRun is not null)" @onclick="ResetSimulation">Reset</button>
    <b style="margin-left: auto">picSimu</b>
</div>


<fieldset class="content" disabled="@(_autoStep || _picRun is not null)">
<div class="d-flex flex-row justify-content-between">
    <label class="h5 pe-5">SFR + W:</label>
    <div>
        <label class="sfr-label">W: </label>
        <label title="@_pic.WRegister.ToTooltipString()" class="sfr-value">@_pic.WRegister.ToHexString()</label>
    </div>
    <div class="hex-input">
        <label class="sfr-label">PCL: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[2]"></HexInput>
    </div>
    <div class="hex-input">
        <label class="sfr-label">PCLATH: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[0xA]"></HexInput>
    </div>
    <div class="hex-input">
        <label class="sfr-label">Status: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[3]"></HexInput>
    </div>
    <div class="hex-input">
        <label class="sfr-label">FSR: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[4]"></HexInput>
    </div>
    <div class="hex-input">
        <label class="sfr-label">Option: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[0x81]"></HexInput>
    </div>
    <div>
        <label class="sfr-label">Prescaler: </label>
        <label class="sfr-value">1:@_pic.GetScaler()</label>
    </div>
    <div class="hex-input">
        <label class="sfr-label">Timer0: </label>
        <HexInput class="form-control" @bind-Value="_registerBindings[1]"></HexInput>
    </div>
</div>

<hr class="my-1">

<div class="d-flex flex-row overflow-hidden pt-2">

<div style="flex-grow: 2" class="d-flex flex-column overflow-hidden">
    <div class="d-flex flex-row align-items-baseline">
        <label style="margin-right: 2em" class="h5">LST</label>
        <div class="d-flex flex-row align-items-center @(_picRun is null ? "visually-hidden" : "")">
            <b style="color: #268bd2">Running</b>
            <div class="dot-flashing"></div>
        </div>
    </div>
    <div id="code-block" class="code-block d-flex overflow-auto flex-row @(_picRun is not null ? "code-block-disabled" : "")">
        @{
            int rowCount = Regex.Matches(_sourceCode, "$", RegexOptions.Multiline).Count;
            <div class="d-flex code-block-breakpoints">
                <pre id="breakpoint-pre">
            @if (_sourceCode != "")
            {
                int y = 0;
                @for (int i = 0; i < rowCount - 1; i++)
                {
                    @if (_instructionRows.Contains(i))
                    {
                        Breakpoint breakpoint = _pic.GetBreakPoint(y);
                        <BootstrapCheckbox @bind-Value="breakpoint.Value"></BootstrapCheckbox>
                        y++;
                    }
                    else
                    {
                        <div>&zwnj;</div>
                    }
                }
            }
            </pre>
            </div>
        }
        <pre id="code-pre"></pre>
    </div>
</div>

<div style="margin-left: 0.5em" class="vr"></div>

<div id="register-table" class="d-flex flex-column">
    <label class="h5">File Register</label>
    <label class="h5">(SFR & GPR)</label>
    <div style="overflow-x: hidden;" class="d-flex">
        <table class="table-sm">
            <thead>
            <tr>
                <th class="text-center" colspan="2">Bank 0</th>
                <th class="text-center" colspan="2">Bank 1</th>
            </tr>
            <tr>
                <th>Adr.</th>
                <th class="register-table-border-1">Val.</th>
                <th class="register-table-border-2">Adr.</th>
                <th>Val.</th>
            </tr>
            </thead>
            <tbody>
            @for (uint i = 0; i < _pic.Memory.Registers.Length / 2; i++)
            {
                uint il = i;
                uint y = i + 0x80;
                <tr>
                    <td title="@i">@i.ToHexString()</td>
                    <td class="hex-input" title="@_pic.Memory.ReadRegister(i).ToTooltipString()">
                        <HexInput class="" @bind-Value="_registerBindings[il]"></HexInput>
                    </td>
                    <td title="@y">@y.ToHexString()</td>
                    <td class="hex-input" title="@_pic.Memory.ReadRegister(y).ToTooltipString()">
                        <HexInput class="" @bind-Value="_registerBindings[y]"></HexInput>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<div style="margin-left: 0.5em" class="vr"></div>

<div class="d-flex flex-column justify-content-around">

    <div class="d-flex flex-row justify-content-around">
        <div id="timing-control" class="d-flex flex-column smaller-text justify-content-center">
            <label class="h5">Timing</label>
            <label class="sfr-label">Runtime: </label>
            <label>@_pic.CalculateRuntime() Âµs</label>
            <div>
                <label class="sfr-label">Quartz: </label>
                <select class="form-select-sm" @bind="_pic.FrequencyInMhz">
                    <option value="0.032">32 KHz</option>
                    <option value="0.1">100 MHz</option>
                    <option value="4">4 MHz</option>
                    <option value="8">8 MHz</option>
                    <option value="16">16 MHz</option>
                    <option value="32">32 MHz</option>
                    <option value="64">64 MHz</option>
                </select>
            </div>
            <div>
                <label class="sfr-label">Release Watchdog: </label>
                <BootstrapCheckbox @bind-Value="Timing.ReleaseWatchdog"></BootstrapCheckbox>
            </div>
            <div>
                <label class="sfr-label">Watchdog: </label> <label>00h</label>
            </div>
        </div>

        <div class="vr"></div>

        <div style="flex-grow: 2; align-items: center;" id="stack-table" class="d-flex flex-column">
            <label class="h5">Stack</label>
            <table style="width: fit-content" class="table-sm">
                <thead>
                <tr>
                    <th>Ptr.</th>
                    <th>Adr.</th>
                </tr>
                </thead>
                <tbody>
                @{
                    @for (int i = 0; i < _pic.Stack.Length; i++)
                    {
                        <tr class='@(_pic.Stack.Pointer == i ? "stack-highlight" : "")'>
                            <td>@i</td>
                            <td>@_pic.Stack.Get(i).ToHexString()</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>

    <hr>

    <div id="sfr-bits-table" class="d-flex flex-column">
        <label class="h5">SFR (Bits)</label>
        <table style="height: 100%" class="table-sm">
            <tbody>
            <tr>
                <th>Status</th>
                <td>IRP</td>
                <td>RP1</td>
                <td>RP0</td>
                <td style="text-decoration:overline">TO</td>
                <td style="text-decoration:overline">PD</td>
                <td>Z</td>
                <td>DC</td>
                <td>C</td>
            </tr>
            <tr>
                <th></th>
                @{
                    uint statusReg = _pic.Memory.ReadRegister(3);
                    @for (int i = 7; i >= 0; i--)
                    {
                        <td>@statusReg.GetBit(i)</td>
                    }
                }
            </tr>
            <tr>
                <th>Option</th>
                <td style="text-decoration:overline">RBPU</td>
                <td>INTEDG</td>
                <td>T0CS</td>
                <td>T0SE</td>
                <td>PSA</td>
                <td>PS2</td>
                <td>PS1</td>
                <td>PS0</td>
            </tr>
            <tr>
                <th></th>
                @{
                    uint optionReg = _pic.Memory.UnmaskedReadRegister(0x81);
                    @for (int i = 7; i >= 0; i--)
                    {
                        <td>@optionReg.GetBit(i)</td>
                    }
                }
            </tr>
            <tr>
                <th>Intcon</th>
                <td>GIE</td>
                <td>EEIE</td>
                <td>T0IE</td>
                <td>INTE</td>
                <td>RBIE</td>
                <td>T0IF</td>
                <td>INTF</td>
                <td>RBIF</td>
            </tr>
            <tr>
                <th></th>
                @{
                    uint intconReg = _pic.Memory.UnmaskedReadRegister(0xb);
                    @for (int i = 7; i >= 0; i--)
                    {
                        <td>@intconReg.GetBit(i)</td>
                    }
                }
            </tr>
            </tbody>
        </table>
    </div>

    <hr>

    @* Port A *@
    <div class="d-flex flex-row">
        <label class="h5">Port A</label>
        <label style="margin-left: auto">Tris 1: Input / 0: Output</label>
    </div>
    <div class="d-flex flex-row justify-content-between me-2">
        <div class="sfr-label port-label">Index</div>
        @for (int i = 7; i >= 0; i--)
        {
            <div>@i</div>
        }
    </div>
    <div class="d-flex flex-row justify-content-between me-2">
        <div class="sfr-label port-label">Tris</div>
        @for (int i = 7; i >= 0; i--)
        {
            RegisterBit bit = _pic.Memory.GetRegisterBit(0x85, i);
            <BootstrapCheckbox @bind-Value="bit.Value"></BootstrapCheckbox>
        }
    </div>
    <div class="d-flex flex-row justify-content-between me-2">
        <div class="sfr-label port-label">Pin</div>
        @for (int i = 7; i >= 0; i--)
        {
            var bit = new PortBit(_pic.Memory.PortA, i);
            <BootstrapCheckbox @bind-Value="bit.Value"></BootstrapCheckbox>
        }
    </div>
    @* Port A *@
    <hr>

    @* Port B *@
    <label class="h5">Port B</label>
    <div class="d-flex flex-row justify-content-between me-2">
        <div class="sfr-label port-label">Index</div>
        @for (int i = 7; i >= 0; i--)
        {
            <div>@i</div>
        }
    </div>
    <div class="d-flex flex-row justify-content-between me-2">
        <div class="sfr-label port-label">Tris</div>
        @for (int i = 7; i >= 0; i--)
        {
            RegisterBit bit = _pic.Memory.GetRegisterBit(0x86, i);
            <BootstrapCheckbox @bind-Value="bit.Value"></BootstrapCheckbox>
        }
    </div>
    <div class="d-flex flex-row justify-content-between me-2 mb-2">
        <div class="sfr-label port-label">Pin</div>
        @for (int i = 7; i >= 0; i--)
        {
            var bit = new PortBit(_pic.Memory.PortB, i);
            <BootstrapCheckbox @bind-Value="bit.Value"></BootstrapCheckbox>
        }
    </div>
    @* Port B *@
</div>
</div>
</fieldset>
<hr class="mt-1">