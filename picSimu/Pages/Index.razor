@page "/"
@using picSimu.Simulation
@* @implements IAsyncDisposable *@
@inject IJSRuntime JS

@code {
    private IJSObjectReference? module;
    private string? code;
    private string? parsedInstructionCodes;
    public string[]? InstructionCodes;
    private Pic? pic;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/parser.js");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        code = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
        await DisplayPicCode(code);
        parsedInstructionCodes = await GetInstructionCodes(code);
        Console.WriteLine("parsed instruction codes: " + parsedInstructionCodes);
        if (parsedInstructionCodes != null)
        {
            InstructionCodes = parsedInstructionCodes.Split(",");
            pic = new Pic();

            if (InstructionCodes != null && pic != null)
            {
                pic.LoadInstructionCodes(InstructionCodes);
            }
        }
    }

    public async ValueTask<string?> DisplayPicCode(string sourceCode)
    {
        return module is not null ?
            await module.InvokeAsync<string>("parsePic", sourceCode) : null;
    }

    public async ValueTask<string?> GetInstructionCodes(string sourceCode)
    {
        return module is not null ?
            await module.InvokeAsync<string>("getInstructionCodes", sourceCode) : null;
    }

    public async Task<bool> RunSimulation()
    {
        if (InstructionCodes != null && pic != null)
        {
            pic.Run();
        }
        return false;
    }

    public async Task<bool> StopSimulation()
    {
        if (InstructionCodes != null && pic != null)
        {
            pic.Stop();
        }
        return false;
    }

    public async Task<bool> StepSimulation()
    {
        if (InstructionCodes != null && pic != null)
        {
            pic.Step();
        }
        return false;
    }

    public async Task<bool> ResetSimulation()
    {
        if (InstructionCodes != null && pic != null)
        {
            pic.Reset();
        }
        return false;
    }

    // public async ValueTask DisposeAsync()
    // {
    //     if (module is not null)
    //     {
    //         await module.DisposeAsync();
    //     }
    // }

    private static string FormatValue(uint value)
    {
        return value + "\n" + Convert.ToString(value, 2).PadLeft(8, '0');
    }

    private string UpdateProgramCounter(uint pc)
    {
        module?.InvokeAsync<string>("highlightCodeLine", pc.ToString());
        return $"{pc} ({pc.ToString("X2")}h)";
    }

}

<PageTitle>Index</PageTitle>

<div class="top-row px-4">
    <InputFile style="width: 30em" class="form-control form-control-sm" OnChange="@LoadFiles" multiple/>
    <button class="btn btn-outline-dark btn-sm" disabled="@(InstructionCodes is null)" @onclick="RunSimulation">Start</button>
    <button class="btn btn-outline-dark btn-sm" disabled="@(InstructionCodes is null)" @onclick="StopSimulation">Stop</button>
    <button class="btn btn-outline-dark btn-sm" disabled="@(InstructionCodes is null)" @onclick="StepSimulation">Step</button>
    <button class="btn btn-outline-dark btn-sm" disabled="@(InstructionCodes is null)" @onclick="ResetSimulation">Reset</button>
    <b style="margin-left: auto">picSimu</b>
</div>


<article class="content">
    <span>
        PC:
        @if (pic != null)
        {
            @UpdateProgramCounter(pic.Programmcounter)
        }
    </span>

    <div class="d-flex flex-row overflow-hidden justify-content-between pt-2">
        <div class="d-flex flex-column">
            <h4> LST </h4>
            <div id="code-block" class="code-block d-flex overflow-hidden"></div>
        </div>
        <div class="d-flex flex-column">
            <h4> Memory </h4>
            <div class="d-flex overflow-auto">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Address Bank 0</th>
                        <th>Bank 0</th>
                        <th>Address Bank 1</th>
                        <th>Bank 1</th>
                    </tr>
                    </thead>
                    <tbody>
                    @{
                        if (pic != null)
                        {
                            uint y;
                            @for (uint i = 0; i < pic.Memory.Register.Length / 2; i++)
                            {
                                y = i + 0x80;
                                <tr>
                                    <td title="@i">@i.ToString("X2")h</td>
                                    <td contenteditable title="@FormatValue(pic.Memory.ReadRegister(i))">@pic.Memory.ReadRegister(i).ToString("X2")h</td>
                                    <td title="@y">@y.ToString("X2")h</td>
                                    <td contenteditable title="@FormatValue(pic.Memory.ReadRegister(y))">@pic.Memory.ReadRegister(y).ToString("X2")h</td>
                                </tr>
                            }
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
        <div>
            <h4> State </h4>
            <table class="table">
                <thead>
                <tr>
                    <th>W</th>
                    <th>C</th>
                    <th>DC</th>
                    <th>Z</th>
                </tr>
                </thead>
                <tbody>
                @{
                    if (pic != null)
                    {
                        <tr>
                            <td title="@FormatValue(pic.wRegister)">@pic.wRegister.ToString("X2")h</td>
                            <td>@Convert.ToByte(pic.Memory.GetCarryFlag())</td>
                            <td>@Convert.ToByte(pic.Memory.GetDigitCarryFlag())</td>
                            <td>@Convert.ToByte(pic.Memory.GetZeroFlag())</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</article>
<hr>