@page "/"
@using picSimu.Simulation
@* @implements IAsyncDisposable *@
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>

<InputFile OnChange="@LoadFiles" multiple/>
@* <button disabled="@(InstructionCodes is null ? "true" : "false")" @onclick="RunSimulation">RUN</button> *@
<button disabled="@(InstructionCodes is null ? true : false)" @onclick="RunSimulation">RUN</button>

@code {
    private IJSObjectReference? module;
    private string? code;
    private string? parsedInstructionCodes;
    public string[]? InstructionCodes;
    private Pic? pic;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/parser.js");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        code = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
    // Console.WriteLine(code);
        await DisplayPicCode(code);
        parsedInstructionCodes = await GetInstructionCodes(code);
        Console.WriteLine("parsed instruction codes: " + parsedInstructionCodes);
        if (parsedInstructionCodes != null)
        {
            InstructionCodes = parsedInstructionCodes.Split(",");
            pic = new Pic();
        }
    }

    public async ValueTask<string?> DisplayPicCode(string sourceCode)
    {
        return module is not null ?
            await module.InvokeAsync<string>("parsePic", sourceCode) : null;
    }

    public async ValueTask<string?> GetInstructionCodes(string sourceCode)
    {
        return module is not null ?
            await module.InvokeAsync<string>("getInstructionCodes", sourceCode) : null;
    }

    public async Task<bool> RunSimulation()
    {
        if (InstructionCodes != null && pic != null)
        {
            pic.Run(InstructionCodes);
        }
        return false;
    }

    // public async ValueTask DisposeAsync()
    // {
    //     if (module is not null)
    //     {
    //         await module.DisposeAsync();
    //     }
    // }

}

<div class="d-flex flex-row justify-content-between pt-4">
    <div id="code-block" class="code-block"> </div>
    <div>
        <h2> Memory </h2>
        <table class="table">
            <thead>
            <tr>
                <th>Address Bank 0</th>
                <th>Bank 0</th>
                <th>Address Bank 1</th>
                <th>Bank 1</th>
            </tr>
            </thead>
            <tbody>
            @{
                if (pic != null)
                {
                    int i = 0;
                    int y;
                    @foreach (var register in pic.ProgramMemory)
                    {
                        y = i + 0x80;
                        <tr>
                            <td title="@i">@i.ToString("X2")h</td>
                            <td>0</td>
                            <td title="@y">@y.ToString("X2")h</td>
                            <td>0</td>
                        </tr>
                        i++;
                    }
                }
            }
            </tbody>
        </table>
    </div>
</div>